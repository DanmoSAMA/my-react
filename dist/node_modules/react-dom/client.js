(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;

	const NoFlags = 0b0000001;
	const Placement = 0b0000010;
	const Update = 0b0000100;
	const ChildDeletion = 0b0001000;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    type;
	    // tag: 结点类型
	    tag;
	    // pendingProps: 接下来有哪些props需要改变 / 刚开始工作时的props
	    pendingProps;
	    key;
	    ref;
	    stateNode;
	    return;
	    sibling;
	    child;
	    // 同级的fiberNode有好几个，比如一个ul下有多个li，它们的index分别是0、1、2
	    index;
	    // 工作完成后 / 确定下来的props
	    memoizedProps;
	    memoizedState;
	    // 双缓冲技术，current和wip的切换
	    alternate;
	    // 保存标记，副作用
	    flags;
	    // 子树中包含的flags，用于冒泡
	    subtreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.ref = null;
	        this.key = key;
	        // HostComponent.stateNode => div DOM
	        this.stateNode = null;
	        // FunctionComponent.type => Function
	        this.type = null;
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0;
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.memoizedState = null;
	        this.updateQueue = null;
	        this.alternate = null;
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    // 指向整个更新完成后的HostFiber
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    // 双缓存机制，每次都获取对应的另一个fiberNode
	    let wip = current.alternate;
	    // 首屏渲染 mount
	    if (wip === null) {
	        // 从current继承
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        wip.pendingProps = pendingProps;
	        // 去除之前遗留的副作用
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型', element);
	    }
	    // 直接把reactElement的props，作为fiber的pendingProps
	    // 所以updateHostComponent中，直接从pendingProps中获取nextChildren
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	// 创建Update实例
	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	// 初始化UpdateQueue
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	// 将update插入到updateQueue
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	// 消费update
	// baseState: 初始状态；pendingUpdate: 要消费的update
	// 返回全新的状态
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            // baseState 1 + update (x) => 4x -> memoizedState 4
	            result.memoizedState = action(baseState);
	        }
	        else {
	            // baseState 1 + update 2 -> memoizedState 2
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	// 防止他人滥用ReactElement
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function ChildReconciler(shouldTrackEffects) {
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        // 根据element创建一个fiber，并返回
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 插入单一的结点
	    function placeSingleChild(fiber) {
	        // 传入的fiber是刚创建好的wip fiber，alternate为current
	        // current === null，说明是首屏渲染的情况
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 单结点
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    const childFiber = reconcileSingleElement(returnFiber, currentFiber, newChild);
	                    return placeSingleChild(childFiber);
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	            }
	        }
	        // 多结点
	        // 文本结点
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            const childFiber = reconcileSingleTextNode(returnFiber, currentFiber, newChild);
	            return placeSingleChild(childFiber);
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	// 追踪副作用
	const reconcileChildFibers = ChildReconciler(true);
	// 不追踪副作用，用于mount
	const mountChildFibers = ChildReconciler(false);

	// 递 计算状态最新值 + 创造子fiberNode
	const beginWork = (wip) => {
	    // 比较，返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot: {
	            return updateHostRoot(wip);
	        }
	        case HostComponent: {
	            return updateHostComponent(wip);
	        }
	        case HostText: {
	            // 没有子结点，所以返回null
	            return null;
	        }
	        default: {
	            {
	                console.warn('beginWork未实现的类型');
	            }
	        }
	    }
	    return null;
	};
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    // 计算完，之前的update就没用了，清除
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    wip.memoizedState = memoizedState;
	    // 子对应的Element
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    // 对比子结点的current fiberNode和子结点的reactElement，生成子结点对应的wip fiberNode
	    const current = wip.alternate;
	    // 性能优化策略：先构建屏的DOM树，最后把根结点插入页面，只做一次插入操作
	    // 挂载的组件树的所有fiber会走 mount，没有副作用
	    // 在更新刚开始时，为hostRootFiber创建了wip（见prepareFreshStack）
	    // 在首屏渲染时，只有这一个结点同时存在current和wip
	    // 所以hostRootFiber会走update，被插入Placement的flags，最终执行一次DOM插入操作
	    if (current) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	const createInstance = (type, props) => {
	    // TODO: 处理props
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	// 下一个需要执行的effect
	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect) {
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags && child) {
	            // 继续向子结点遍历
	            nextEffect = child;
	        }
	        else {
	            // nextEffect是叶子结点，或是有符合条件subtreeFlags的最下面的结点
	            // 往上归
	            while (nextEffect) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling) {
	                    nextEffect = sibling;
	                    break;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement;
	    }
	    // Update
	    // ChildDeletion
	};
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    // 获取parent dom
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        // HostComponent / HostRoot
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            // parentTag.stateNode 指向 FiberRootNode，访问其container属性可拿到dom
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    // 往下递归，找到第一个是HostComponent或HostText的结点，插入
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	// 归
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent: {
	            if (current && wip.stateNode) ;
	            else {
	                // 1. 构建DOM
	                const instance = createInstance(wip.type);
	                // 2. 将DOM插入到DOM树中
	                // 因为是归的过程，创建的instance在当前dom树中是最靠上的，所以把剩余部分插在它下面
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        }
	        case HostText: {
	            if (current && wip.stateNode) ;
	            else {
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        }
	        case HostRoot: {
	            bubbleProperties(wip);
	            return null;
	        }
	        default: {
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	        }
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node.child) {
	            // 当前node对应函数组件（或其他），不能直接插入dom结点，找孩子，即“递”
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        // Q: 这段代码目前感觉没有必要，先留着
	        if (node === wip) {
	            return;
	        }
	        // node.child === null，走到底了，此时找sibling
	        // 如果找不到sibling，就往上“归”
	        while (!node.sibling) {
	            if (!node.return || node.return === wip) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	// flags分布在不同的fiberWork中，为了快速找到它们
	// 可以利用归的流程，把子fiber的flags冒泡到父
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let workInProgress = null;
	// 初始化
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	// 连接刚创建的container，和renderRoot（串联功能）
	function scheduleUpdateOnFiber(fiber) {
	    // TODO：调度功能
	    //
	    // 无论是哪个结点触发了更新，都要向上遍历到根结点
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	// 向上遍历到根结点，并返回
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent) {
	        node = parent;
	        parent = parent.return;
	    }
	    if (node.tag === HostRoot) {
	        // 返回FiberRootNode
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    prepareFreshStack(root);
	    while (true) {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop发生错误', e);
	            }
	            workInProgress = null;
	        }
	    }
	    // 此时已经完成了beginWork和completeWork流程
	    // root.current.alternate 指向构建好的一棵完整的fiber tree
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (!finishedWork) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个子阶段需要执行的操作（使用masks）
	    // Q: 因为有冒泡（bubbleProperties）操作，所以暂时不明白，为什么subtree和root都要判断flags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutations
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        // 没有更新发生
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    while (workInProgress) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    // next可能是子fiber，也可能是null
	    const next = beginWork(fiber);
	    // 工作完成
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        // 归
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    // 没有子结点，遍历兄弟结点
	    let node = fiber;
	    while (node) {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling) {
	            // 有兄弟，找兄弟
	            workInProgress = sibling;
	            return;
	        }
	        // 找父结点
	        node = node.return;
	        workInProgress = node;
	    }
	}

	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    // 得到FiberRootNode和HostRootFiber，并让二者产生关联
	    const root = new FiberRootNode(container, hostRootFiber);
	    // 接入更新机制
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    // 代表本次更新和element相关
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	}

	// ReactDOM.createRoot(root).render(<App />)
	// 引入了react-reconciler中的函数，因此打包后的文件含有react-reconciler中的内容
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
